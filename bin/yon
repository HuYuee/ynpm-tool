#!/usr/bin/env node

'use strict';

const co = require('co');
const chalk = require('chalk');
const execSync = require('child_process').execSync;
const exec = require('child_process').exec;
const pkgFile = require('../package.json');
const thunkify = require("thunkify");
const request = require('request');
const ora = require('ora');

const DEAFAULT_MIRROR = 'https://registry.npm.taobao.org';

/**
 * ynpm --version || ynpm -v
 */
const opt = process.argv[2];
if(opt == '-v' || opt == '--version') {
    console.log( 'Package Manager : v' + pkgFile.version );
    process.exit(0);
}

/**
 * ynpm --help || ynpm -h
 */
 if(opt == '-h' || opt == '--help' || opt == undefined) {
     console.log(
   `
   Usage:
   ----------------------------------------------------
     ynpm install
     ynpm install <pkg>
     ynpm install <pkg>@<tag>
     ynpm install <pkg>@<version>
     ynpm install <pkg>@<version range>
     ynpm install <folder>
     ynpm install <tarball file>
     ynpm install <tarball url>
     ynpm install <git:// url>
     ynpm install <github username>/<github project>

   Options:
   ----------------------------------------------------
     --save, -S, --save-dev, -D: save installed dependencies into package.json
     -g, --global: install devDependencies to global directory

   Others:
   ----------------------------------------------------
     ynpm --registry: change default mirror address

   `
     );
     process.exit(0);
 }

const IP_Req = thunkify(request);
const Exec = thunkify(exec);

co(function* (){
    const argvs = process.argv;
    if(argvs[2] !== 'i' && argvs[2] != 'install'){
        console.error(chalk.red('NPM current only support to install packages \nPlease check your command :'));
        const incmd = argvs.splice(2).join(' ');
        console.log(chalk.green('ynpm ' + incmd));
        process.exit(1);
    }

    let registry = DEAFAULT_MIRROR;

    console.log(chalk.dim('CNPM Mirror Downloading...'));

    console.log(chalk.dim(`Mirror:${registry}`));


    let arg_install = `npm --registry=${registry} `;
    if(argvs[2] == 'i' || argvs[2] == 'install'){
        const argv_part = argvs.slice(2).join(' ');
        arg_install += argv_part;
    }

    // execSync(arg_install);
    const start = process.hrtime();
    const spinner = ora().start();
    spinner.color = 'green';
    spinner.text = 'Installing package...';
    var data = yield Exec(arg_install);
    console.log(chalk.bold('\n\nInstall Info:\n' + data[0]));
    console.log(chalk.yellow('Warn Info:\n' + data[1]));
    const end = process.hrtime(start);
    console.log(chalk.green(`√ Execution time : ${end[0]}.${parseInt(end[1]/1000000)}s`));
    console.log(chalk.green(`√ Finish, Happy enjoy coding!`));
    spinner.stop();

    process.exit(1);

}).catch(err => {
    console.error(chalk.red('\n' + err));
    console.error(chalk.yellow('npm version: %s'), pkgFile.version);
    console.error(chalk.yellow('npm args: %s'), process.argv.slice(2).join(' '));
    process.exit(1);
});
